// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_list")
}

model FollowUpInfo {
  id             String   @id @default(cuid())
  email          String
  role           String?
  role_other     String?
  platforms      String?
  monthly_traffic String?
  website_name   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("follow_up_info")
}

model LoiClicks {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())

  @@map("loi_clicks")
}

// Shopify Data Models

model Product {
  id                 String              @id // Shopify product ID
  title              String
  handle             String              @unique
  description        String?
  descriptionHtml    String?
  productType        String?
  vendor             String?
  tags               String
  status             String              @default("ACTIVE") // ACTIVE, ARCHIVED, DRAFT
  createdAt          DateTime
  updatedAt          DateTime
  publishedAt        DateTime?
  templateSuffix     String?
  giftCardTemplateSuffix String?
  totalInventory     Int?
  tracksQuantity     Boolean             @default(false)
  onlineStoreUrl     String?
  onlineStorePreviewUrl String?
  requiresSellingPlan Boolean            @default(false)
  isGiftCard         Boolean             @default(false)
  legacyResourceId   String?
  shopifyCreatedAt   DateTime
  shopifyUpdatedAt   DateTime
  syncedAt           DateTime            @default(now())
  
  // Relationships
  variants           ProductVariant[]
  images             ProductImage[]
  collections        ProductCollection[]
  metafields         ProductMetafield[]
  options            ProductOption[]
  orderLineItems     OrderLineItem[]
  
  @@map("products")
}

model ProductVariant {
  id                    String    @id // Shopify variant ID
  productId             String
  title                 String
  price                 Decimal
  compareAtPrice        Decimal?
  sku                   String?
  barcode               String?
  grams                 Int?
  weight                Float?
  weightUnit            String?
  inventoryQuantity     Int?
  inventoryManagement   String?
  inventoryPolicy       String?
  fulfillmentService    String?
  requiresShipping      Boolean   @default(true)
  taxable               Boolean   @default(true)
  taxCode               String?
  position              Int?
  option1               String?
  option2               String?
  option3               String?
  imageId               String?
  availableForSale      Boolean   @default(true)
  displayName           String?
  legacyResourceId      String?
  shopifyCreatedAt      DateTime
  shopifyUpdatedAt      DateTime
  syncedAt              DateTime  @default(now())
  
  // Relationships
  product               Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  image                 ProductImage? @relation(fields: [imageId], references: [id])
  orderLineItems        OrderLineItem[]
  
  @@map("product_variants")
}

model ProductImage {
  id               String           @id // Shopify image ID
  productId        String
  src              String
  altText          String?
  width            Int?
  height           Int?
  position         Int?
  legacyResourceId String?
  shopifyCreatedAt DateTime
  shopifyUpdatedAt DateTime
  syncedAt         DateTime         @default(now())
  
  // Relationships
  product          Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants         ProductVariant[]
  
  @@map("product_images")
}

model Collection {
  id               String              @id // Shopify collection ID
  title            String
  handle           String              @unique
  description      String?
  descriptionHtml  String?
  sortOrder        String?
  templateSuffix   String?
  disjunctive      Boolean             @default(false)
  rules            String?             // Store collection rules as JSON string
  ruleSet          String?
  publishedAt      DateTime?
  publishedScope   String?
  updatedAt        DateTime
  legacyResourceId String?
  shopifyCreatedAt DateTime
  shopifyUpdatedAt DateTime
  syncedAt         DateTime            @default(now())
  
  // Relationships
  products         ProductCollection[]
  
  @@map("collections")
}

model ProductCollection {
  id           String     @id @default(cuid())
  productId    String
  collectionId String
  position     Int?
  createdAt    DateTime   @default(now())
  
  // Relationships
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  @@unique([productId, collectionId])
  @@map("product_collections")
}

model ProductMetafield {
  id               String   @id // Shopify metafield ID
  productId        String
  namespace        String
  key              String
  value            String
  type             String   // Type of metafield (string, integer, json_string, etc.)
  description      String?
  legacyResourceId String?
  shopifyCreatedAt DateTime
  shopifyUpdatedAt DateTime
  syncedAt         DateTime @default(now())
  
  // Relationships
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, namespace, key])
  @@map("product_metafields")
}

model ProductOption {
  id        String   @id // Shopify option ID
  productId String
  name      String
  position  Int?
  values    String   // Store as JSON string
  createdAt DateTime @default(now())
  syncedAt  DateTime @default(now())
  
  // Relationships
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_options")
}

model Customer {
  id                      String    @id // Shopify customer ID
  email                   String?
  firstName               String?
  lastName                String?
  phone                   String?
  acceptsMarketing        Boolean   @default(false)
  acceptsMarketingUpdatedAt DateTime?
  marketingOptInLevel     String?
  ordersCount             Int       @default(0)
  state                   String?   // enabled, disabled, invited, declined
  totalSpent              Decimal   @default(0.00)
  totalSpentCurrency      String?
  averageOrderValue       Decimal?
  tags                    String    // Store as JSON string
  note                    String?
  verifiedEmail           Boolean   @default(false)
  multipassIdentifier     String?
  taxExempt               Boolean   @default(false)
  taxExemptions           String    // Store as JSON string
  legacyResourceId        String?
  shopifyCreatedAt        DateTime
  shopifyUpdatedAt        DateTime
  syncedAt                DateTime  @default(now())
  
  // Relationships
  orders                  Order[]
  
  @@map("customers")
}

model Order {
  id                      String          @id // Shopify order ID
  customerId              String?
  orderNumber             Int?
  name                    String?         // Order name like "#1001"
  email                   String?
  phone                   String?
  financialStatus         String?         // paid, pending, refunded, etc.
  fulfillmentStatus       String?         // fulfilled, partial, unfulfilled
  currency                String?
  totalPrice              Decimal
  subtotalPrice           Decimal
  totalDiscounts          Decimal         @default(0.00)
  totalLineItemsPrice     Decimal
  totalTax                Decimal         @default(0.00)
  totalShippingPrice      Decimal         @default(0.00)
  totalWeight             Int?
  taxesIncluded           Boolean         @default(false)
  confirmed               Boolean         @default(true)
  cancelled               Boolean         @default(false)
  cancelledAt             DateTime?
  cancelReason            String?
  closedAt                DateTime?
  test                    Boolean         @default(false)
  browserIp               String?
  landingSite             String?
  orderStatusUrl          String?
  referringSite           String?
  sourceIdentifier        String?
  sourceName              String?
  sourceUrl               String?
  tags                    String          // Store as JSON string
  note                    String?
  noteAttributes          String?         // Store as JSON string
  processedAt             DateTime?
  legacyResourceId        String?
  shopifyCreatedAt        DateTime
  shopifyUpdatedAt        DateTime
  syncedAt                DateTime        @default(now())
  
  // Relationships
  customer                Customer?       @relation(fields: [customerId], references: [id])
  lineItems               OrderLineItem[]
  
  @@map("orders")
}

model OrderLineItem {
  id                    String         @id // Shopify line item ID
  orderId               String
  productId             String?
  variantId             String?
  title                 String
  name                  String?
  sku                   String?
  vendor                String?
  quantity              Int
  price                 Decimal
  totalDiscount         Decimal        @default(0.00)
  fulfillmentStatus     String?
  fulfillmentService    String?
  giftCard              Boolean        @default(false)
  grams                 Int?
  properties            String?        // Store as JSON string
  taxable               Boolean        @default(true)
  taxLines              String?        // Store as JSON string
  tipPaymentGateway     String?
  tipPaymentMethod      String?
  totalDiscountSet      String?        // Store as JSON string
  variantInventoryManagement String?
  variantTitle          String?
  requiresShipping      Boolean        @default(true)
  legacyResourceId      String?
  syncedAt              DateTime       @default(now())
  
  // Relationships
  order                 Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product               Product?       @relation(fields: [productId], references: [id])
  variant               ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@map("order_line_items")
}

// ETL Sync Tracking Tables

model SyncLog {
  id           String    @id @default(cuid())
  entityType   String    // products, customers, orders, etc.
  operation    String    // full_sync, incremental_sync, single_entity
  status       String    // started, completed, failed
  startedAt    DateTime
  completedAt  DateTime?
  errorMessage String?
  recordsProcessed Int?
  recordsCreated   Int?
  recordsUpdated   Int?
  recordsSkipped   Int?
  lastCursor   String?   // For pagination
  metadata     String?   // Store as JSON string
  
  @@map("sync_logs")
}

model SyncState {
  id           String   @id @default(cuid())
  entityType   String   @unique // products, customers, orders, etc.
  lastSyncAt   DateTime
  lastCursor   String?  // For pagination
  isActive     Boolean  @default(false)
  syncVersion  String?  // Track sync logic version
  metadata     String?  // Store as JSON string
  updatedAt    DateTime @updatedAt
  
  @@map("sync_states")
}

model WebhookEvent {
  id           String   @id @default(cuid())
  shopifyId    String?  // Shopify webhook ID if applicable
  topic        String   // products/create, orders/updated, etc.
  shop         String   // Shop domain
  payload      String   // Store as JSON string
  processed    Boolean  @default(false)
  processedAt  DateTime?
  errorMessage String?
  attempts     Int      @default(0)
  createdAt    DateTime @default(now())
  
  @@map("webhook_events")
}