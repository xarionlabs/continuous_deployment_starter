// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql" // Changed from sqlite to align with production/common practice for such apps
  url      = env("DATABASE_URL") // Ensure DATABASE_URL is set in your .env file
}

// Example: DATABASE_URL="postgresql://admin:admin@localhost:5432/app_db?schema=public"

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_list")
}

model FollowUpInfo {
  id             String   @id @default(cuid())
  email          String
  role           String?
  role_other     String?
  platforms      String?
  monthly_traffic String?
  website_name   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("follow_up_info")
}

model LoiClicks {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())

  @@map("loi_clicks")
}

// --- Shopify Data Models ---

// Based on shopify_get_past_purchases_dag.py
model ShopifyOrder {
  id                 BigInt    @id // Shopify Order ID
  shop_id            BigInt?   // Shopify Shop ID
  customer_id        BigInt?   // Shopify Customer ID
  email              String?
  total_price        Decimal?  @db.Decimal(10, 2)
  subtotal_price     Decimal?  @db.Decimal(10, 2)
  total_tax          Decimal?  @db.Decimal(10, 2)
  total_discounts    Decimal?  @db.Decimal(10, 2)
  currency           String?
  financial_status   String?
  fulfillment_status String?
  processed_at       DateTime?
  created_at         DateTime?
  updated_at         DateTime?
  landing_site       String?
  referring_site     String?
  source_name        String?
  tags               String?   // Comma-separated tags or JSON string

  line_items ShopifyOrderLineItem[]

  @@map("ShopifyOrder") // Explicitly map to table name used in DAG
}

model ShopifyOrderLineItem {
  id                 BigInt    @id // Shopify Line Item ID
  order_id           BigInt    // Foreign key to ShopifyOrder
  shop_id            BigInt?   // Shopify Shop ID
  product_id         BigInt?   // Shopify Product ID
  variant_id         BigInt?   // Shopify Variant ID
  title              String?
  quantity           Int?
  sku                String?
  vendor             String?
  price              Decimal?  @db.Decimal(10, 2)
  total_discount     Decimal?  @db.Decimal(10, 2) // sum of discounts on the line item
  taxable            Boolean?
  fulfillment_status String?

  order ShopifyOrder @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("ShopifyOrderLineItem")
}

// Based on shopify_get_store_metadata_dag.py
model ShopifyProduct {
  id           BigInt    @id // Shopify Product ID
  shop_id      BigInt?   // Shopify Shop ID
  title        String?
  body_html    String?
  vendor       String?
  product_type String?
  handle       String?   @unique // Product handle is usually unique per shop
  created_at   DateTime?
  updated_at   DateTime?
  published_at DateTime?
  status       String?   // e.g., active, archived, draft
  tags         String?   // Comma-separated tags or JSON string

  variants ShopifyProductVariant[]
  images   ShopifyProductImage[]

  @@map("ShopifyProduct")
}

model ShopifyProductVariant {
  id                       BigInt    @id // Shopify Variant ID
  product_id               BigInt    // Foreign key to ShopifyProduct
  shop_id                  BigInt?   // Shopify Shop ID
  title                    String?   // Variant title (e.g., "Small", "Red")
  price                    Decimal?  @db.Decimal(10, 2)
  sku                      String?   @unique // SKU should be unique if used
  position                 Int?
  inventory_policy         String?   // e.g., deny, continue
  inventory_quantity       Int?
  inventory_item_id        BigInt?   @unique // Globally unique ID for the inventory item
  old_inventory_quantity   Int?
  requires_shipping        Boolean?
  taxable                  Boolean?
  barcode                  String?   // Barcode (UPC, EAN, etc.)
  grams                    Int?
  weight                   Float?    // Numerical value of weight
  weight_unit              String?   // e.g., kg, lb, oz, g
  created_at               DateTime?
  updated_at               DateTime?

  product ShopifyProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("ShopifyProductVariant")
}

model ShopifyProductImage {
  id         BigInt    @id // Shopify Image ID
  product_id BigInt    // Foreign key to ShopifyProduct
  shop_id    BigInt?   // Shopify Shop ID
  position   Int?
  created_at DateTime?
  updated_at DateTime?
  alt        String?   // Alt text for image
  width      Int?
  height     Int?
  src        String?   // URL of the image

  product ShopifyProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("ShopifyProductImage")
}

model ShopifyCollection { // For Custom Collections
  id              BigInt    @id // Shopify Custom Collection ID
  shop_id         BigInt?   // Shopify Shop ID
  handle          String?   @unique // Collection handle is usually unique per shop
  title           String?
  updated_at      DateTime?
  body_html       String?
  published_at    DateTime?
  sort_order      String?
  template_suffix String?
  published_scope String?   // e.g., web, global

  @@map("ShopifyCollection")
}

model ShopifySmartCollection {
  id              BigInt    @id // Shopify Smart Collection ID
  shop_id         BigInt?   // Shopify Shop ID
  handle          String?   @unique // Collection handle is usually unique per shop
  title           String?
  updated_at      DateTime?
  body_html       String?
  published_at    DateTime?
  sort_order      String?
  template_suffix String?
  published_scope String?   // e.g., web, global
  // rules           Json?  // Smart collections have rules, might store as JSON

  @@map("ShopifySmartCollection")
}
