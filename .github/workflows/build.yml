name: build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'Build tag to use'
        required: true
        type: string
      force_build_all:
        description: 'Force build all applications'
        required: false
        type: boolean
        default: false

concurrency:
  group: build
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{steps.skip-workflow.outputs.skip}}
      force_build: ${{steps.force-build-check.outputs.force}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: skip-workflow
        id: skip-workflow
        uses: saulmaldonado/skip-workflow@v1
        with:
          phrase: /\[.*skip-build.*\]/i
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: check-force-build
        id: force-build-check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "force=${{ github.event.inputs.force_build_all }}" >> $GITHUB_OUTPUT
          else
            if git log -1 --pretty=%B | grep -i "\[force-build\]" > /dev/null; then
              echo "force=true" >> $GITHUB_OUTPUT
            else
              echo "force=false" >> $GITHUB_OUTPUT
            fi
          fi

  define-tag:
    runs-on: ubuntu-latest
    needs: [skip-check]
    outputs:
      tag: ${{steps.create-commit-tag.outputs.commit_tag}}
    steps:
      - name: create commit tag name
        id: create-commit-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "commit_tag=${{ github.event.inputs.build_tag }}" >> $GITHUB_OUTPUT
          else
            echo "commit_tag=$(TZ='Europe/Amsterdam' date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          fi

  find-changed-applications:
    runs-on: ubuntu-latest
    needs: [skip-check]
    outputs:
      applications: ${{ steps.find_applications.outputs.applications }}
      has_changes: ${{ steps.find_applications.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for comparison
      
      - name: Find valid applications and utilities
        id: find_valid_apps
        run: |
          # Find all valid application directories (those with Dockerfiles)
          VALID_APPS=$(find applications -type d -exec test -e '{}'/Dockerfile \; -print | sed "s/applications\///" | sort)
          echo "Valid applications found:"
          echo "$VALID_APPS"
          
          # Find all valid utility directories (those with Dockerfiles)
          VALID_UTILITIES=$(find utilities -type d -exec test -e '{}'/Dockerfile \; -print | sed "s/utilities\///" | sort)
          echo "Valid utilities found:"
          echo "$VALID_UTILITIES"
          
          # Combine applications and utilities
          ALL_BUILDABLE=$(echo -e "$VALID_APPS\n$VALID_UTILITIES" | sed '/^$/d')
          echo "All buildable items:"
          echo "$ALL_BUILDABLE"
          
          echo "valid_apps=$(echo "$ALL_BUILDABLE" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

      - name: Find changed applications and utilities
        id: find_applications
        run: |
          # Get valid buildable items from previous step
          VALID_ITEMS=$(echo '${{ steps.find_valid_apps.outputs.valid_apps }}' | jq -r '.[]')
          
          if [ "${{ needs.skip-check.outputs.force_build }}" = "true" ]; then
            # If force_build is true, use all valid items
            CHANGED_ITEMS="$VALID_ITEMS"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Get the list of changed files
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            
            # Find which valid items have changes
            CHANGED_ITEMS=""
            for item in $VALID_ITEMS; do
              # Check if item is in applications/ or utilities/
              if echo "$CHANGED_FILES" | grep -q "^applications/$item/" || echo "$CHANGED_FILES" | grep -q "^utilities/$item/"; then
                CHANGED_ITEMS="$CHANGED_ITEMS$item"$'\n'
              fi
            done
            
            # Remove trailing newline and check if we have changes
            CHANGED_ITEMS=$(echo "$CHANGED_ITEMS" | sed '/^$/d')
            if [ -n "$CHANGED_ITEMS" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Convert to JSON array
          echo "applications=$(echo "$CHANGED_ITEMS" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

      - name: Print applications and utilities to build
        run: |
          echo "Applications and utilities to build:"
          echo '${{ steps.find_applications.outputs.applications }}' | jq -r '.[]'

  build-application:
    needs: [skip-check, define-tag, find-changed-applications]
    if: ${{ !needs.skip-check.outputs.skip && needs.find-changed-applications.outputs.has_changes == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ITEM: ${{ fromJSON(needs.find-changed-applications.outputs.applications) }}
      fail-fast: false
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine context path
        id: context
        run: |
          if [ -d "applications/${{ matrix.ITEM }}" ]; then
            echo "path=applications/${{ matrix.ITEM }}" >> $GITHUB_OUTPUT
          elif [ -d "utilities/${{ matrix.ITEM }}" ]; then
            echo "path=utilities/${{ matrix.ITEM }}" >> $GITHUB_OUTPUT
          else
            echo "Error: Could not find ${{ matrix.ITEM }} in applications or utilities"
            exit 1
          fi

      - name: Determine image name based on type
        id: image_name
        run: |
          if [ -d "utilities/${{ matrix.ITEM }}" ]; then
            echo "name=${{ env.REGISTRY }}/${{ github.repository }}/utilities-${{ matrix.ITEM }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.ITEM }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image_name.outputs.name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          push: true
          tags: |
            ${{ steps.image_name.outputs.name }}:${{ needs.define-tag.outputs.tag }}
            ${{ steps.image_name.outputs.name }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: type=gha

      - name: Run tests on the Docker image
        id: test-images
        run: docker run --entrypoint=/app/entrypoints/entrypoint_test.sh ${{ steps.image_name.outputs.name }}:${{ needs.define-tag.outputs.tag }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.image_name.outputs.name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  create-tag-ref:
    runs-on: ubuntu-latest
    needs: 
      - skip-check
      - define-tag
      - find-changed-applications
      - build-application
    if: ${{always() && !needs.skip-check.outputs.skip}}
    permissions:
      contents: write
    steps:
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{needs.define-tag.outputs.tag}}`,
              sha: context.sha
            })

  update-the-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - skip-check
      - define-tag
      - find-changed-applications
      - create-tag-ref
    if: ${{ !needs.skip-check.outputs.skip }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases
          fetch-tags: true
          fetch-depth: 0
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          if [ "${{ needs.find-changed-applications.outputs.has_changes }}" = "true" ]; then
            # If we have application changes, merge the tag and update version.env
            git merge -X theirs ${{ needs.define-tag.outputs.tag }}
            echo APP_VERSION=${{ needs.define-tag.outputs.tag }} >> services/version.env
            git add --force services/version.env
            git commit -m "Bumping the APP_VERSION to ${{ needs.define-tag.outputs.tag }}"
          else
            # If we have no application changes, just merge the current commit
            git merge -X theirs ${{ github.sha }}
          fi
          
          git push origin releases

  trigger-staging-release:
    needs: [skip-check, update-the-release-branch]
    if: ${{ !needs.skip-check.outputs.skip }}
    uses: ./.github/workflows/release.yml
    with:
      environment: staging
    secrets: inherit

  trigger-staging-e2e:
    needs: [skip-check, trigger-staging-release]
    if: ${{ !needs.skip-check.outputs.skip }}
    uses: ./.github/workflows/e2e-tests.yml
    with:
      environment: staging
    secrets: inherit

  trigger-live-release:
    needs: [skip-check, trigger-staging-e2e]
    if: ${{ !needs.skip-check.outputs.skip }}
    uses: ./.github/workflows/release.yml
    with:
      environment: live
    secrets: inherit

  trigger-live-e2e:
    needs: [skip-check, trigger-live-release]
    if: ${{ !needs.skip-check.outputs.skip }}
    uses: ./.github/workflows/e2e-tests.yml
    with:
      environment: live
    secrets: inherit

