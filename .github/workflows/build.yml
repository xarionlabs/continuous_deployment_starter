name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io

jobs:
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{steps.skip-workflow.outputs.skip}}
    steps:
      - name: skip-workflow
        id: skip-workflow # id used for referencing step
        uses: saulmaldonado/skip-workflow@v1
        with:
          phrase: /\[.*skip-build.*\]/i # matches with commits that contain '[skip-build]'
          github-token: ${{ secrets.GITHUB_TOKEN }}

  define-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.create-commit-tag.outputs.commit_tag}}
    steps:
      - name: create commit tag name
        id: create-commit-tag
        run: |
          echo "commit_tag=$(TZ='Europe/Amsterdam' date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

  define-applications:
    runs-on: ubuntu-latest
    outputs:
      applications: ${{ steps.find_applications.outputs.applications }}
    steps:
      - uses: actions/checkout@v4
      - name: Finding applications that have dockerfiles in them
        id: find_applications
        run: |
          echo "applications=$(find applications -type d -exec test -e '{}'/Dockerfile \; -print | sed "s/applications\///" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
      - name: print_output
        run: |
          echo "${{ steps.find_applications.outputs.applications }}"

  build-and-push-applications:
    if: ${{ !needs.skip-check.outputs.skip }}
    runs-on: ubuntu-latest
    needs: 
      - define-tag
      - define-applications
      - skip-check
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        APPLICATION: ${{ fromJSON(needs.define-applications.outputs.applications) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: applications/${{ matrix.APPLICATION }}
          push: false
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}:${{ needs.define-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Run tests on the Docker image
        id: test-images
        run: docker run --entrypoint=/app/test.sh ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}:${{ needs.define-tag.outputs.tag }}

      # it should reuse the built image from the previous build script. We use a separate push step
      # to run the tests in-between build and push.
      - name: Push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: applications/${{ matrix.APPLICATION }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}:${{ needs.define-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  create-tag-ref:
    runs-on: ubuntu-latest
    needs: 
      - build-and-push-applications
      - define-tag
    permissions:
      contents: write
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            const commit_tag = process.env.COMMIT_TAG
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{needs.define-tag.outputs.tag}}`,
              sha: context.sha
            })

  update-the-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - define-tag
      - build-and-push-applications
      - create-tag-ref
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases
          fetch-tags: true
          fetch-depth: 0
      - run: |
          env
          git config user.name github-actions
          git config user.email github-actions@github.com
          git merge -X theirs ${{ needs.define-tag.outputs.tag }}
          echo APP_VERSION=${{ needs.define-tag.outputs.tag }} >> services/applications/version.env
          git add --force services/applications/version.env
          git commit -m "Bumping the APP_VERSION to ${{ needs.define-tag.outputs.tag }}"
          # generate application deployment configs
          cd services/applications/
          source version.env
          APP_VERSION=$(echo $APP_VERSION) kompose convert
          git add --force services/applications/.
          git commit -m "Adding the new/updated deployment files ${{ needs.define-tag.outputs.tag }}"
          git push origin releases
