name: build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'Build tag to use'
        required: true
        type: string
      force_build_all:
        description: 'Force build all applications'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io

jobs:
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{steps.skip-workflow.outputs.skip}}
      force_build: ${{steps.force-build-check.outputs.force}}
    steps:
      - name: skip-workflow
        id: skip-workflow
        uses: saulmaldonado/skip-workflow@v1
        with:
          phrase: /\[.*skip-build.*\]/i
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: check-force-build
        id: force-build-check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "force=${{ github.event.inputs.force_build_all }}" >> $GITHUB_OUTPUT
          else
            if git log -1 --pretty=%B | grep -i "\[force-build\]" > /dev/null; then
              echo "force=true" >> $GITHUB_OUTPUT
            else
              echo "force=false" >> $GITHUB_OUTPUT
            fi
          fi

  define-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.create-commit-tag.outputs.commit_tag}}
    steps:
      - name: create commit tag name
        id: create-commit-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "commit_tag=${{ github.event.inputs.build_tag }}" >> $GITHUB_OUTPUT
          else
            echo "commit_tag=$(TZ='Europe/Amsterdam' date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          fi

  find-changed-applications:
    runs-on: ubuntu-latest
    needs: [define-tag, skip-check]
    outputs:
      applications: ${{ steps.find_applications.outputs.applications }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for comparison
      
      - name: Find changed applications
        id: find_applications
        run: |
          if [ "${{ needs.skip-check.outputs.force_build }}" = "true" ]; then
            # If force_build is true, get all applications
            echo "applications=$(find applications -type d -exec test -e '{}'/Dockerfile \; -print | sed "s/applications\///" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          else
            # Get the list of changed files
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            
            # Find applications that have changed
            CHANGED_APPS=$(echo "$CHANGED_FILES" | grep "^applications/" | cut -d'/' -f2 | sort -u)
            
            # If no applications changed, get all applications
            if [ -z "$CHANGED_APPS" ]; then
              CHANGED_APPS=$(find applications -type d -exec test -e '{}'/Dockerfile \; -print | sed "s/applications\///")
            fi
            
            # Convert to JSON array
            echo "applications=$(echo "$CHANGED_APPS" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          fi

      - name: Print applications to build
        run: |
          echo "Applications to build:"
          echo '${{ steps.find_applications.outputs.applications }}' | jq -r '.[]'

  build-application:
    needs: [define-tag, find-changed-applications]
    if: ${{ !needs.skip-check.outputs.skip }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        APPLICATION: ${{ fromJSON(needs.find-changed-applications.outputs.applications) }}
      fail-fast: false
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: applications/${{ matrix.APPLICATION }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}:${{ needs.define-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: type=gha

      - name: Run tests on the Docker image
        id: test-images
        run: docker run --entrypoint=/app/entrypoint_test.sh ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}:${{ needs.define-tag.outputs.tag }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.APPLICATION }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  create-tag-ref:
    runs-on: ubuntu-latest
    needs: 
      - build-application
      - define-tag
    permissions:
      contents: write
    steps:
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{needs.define-tag.outputs.tag}}`,
              sha: context.sha
            })

  update-the-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - define-tag
      - build-application
      - create-tag-ref
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases
          fetch-tags: true
          fetch-depth: 0
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git merge -X theirs ${{ needs.define-tag.outputs.tag }}
          echo APP_VERSION=${{ needs.define-tag.outputs.tag }} >> services/version.env
          git add --force services/version.env
          git commit -m "Bumping the APP_VERSION to ${{ needs.define-tag.outputs.tag }}"
          git push origin releases

  trigger-staging-release:
    needs: [build-application, create-tag-ref, update-the-release-branch]
    runs-on: ubuntu-latest
    if: ${{ !needs.skip-check.outputs.skip }}
    steps:
      - name: Trigger staging release
        run: |
          gh workflow run staging-release.yml -f build_tag=${{ needs.define-tag.outputs.tag }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-staging-e2e:
    needs: [trigger-staging-release]
    runs-on: ubuntu-latest
    if: ${{ !needs.skip-check.outputs.skip }}
    steps:
      - name: Wait for staging release
        run: |
          sleep 30  # Give staging release time to start
          while true; do
            STATUS=$(gh run list --workflow=staging-release.yml --limit=1 --json status --jq '.[0].status')
            if [ "$STATUS" = "completed" ]; then
              break
            elif [ "$STATUS" = "failure" ]; then
              echo "Staging release failed"
              exit 1
            fi
            sleep 10
          done

      - name: Trigger staging e2e tests
        run: |
          gh workflow run e2e-tests.yml -f build_tag=${{ needs.define-tag.outputs.tag }} -f environment=staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-live-release:
    needs: [trigger-staging-e2e]
    runs-on: ubuntu-latest
    if: ${{ !needs.skip-check.outputs.skip }}
    steps:
      - name: Wait for staging e2e tests
        run: |
          sleep 30  # Give e2e tests time to start
          while true; do
            STATUS=$(gh run list --workflow=e2e-tests.yml --limit=1 --json status --jq '.[0].status')
            if [ "$STATUS" = "completed" ]; then
              break
            elif [ "$STATUS" = "failure" ]; then
              echo "Staging e2e tests failed"
              exit 1
            fi
            sleep 10
          done

      - name: Trigger live release
        run: |
          gh workflow run live-release.yml -f build_tag=${{ needs.define-tag.outputs.tag }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-live-e2e:
    needs: [trigger-live-release]
    runs-on: ubuntu-latest
    if: ${{ !needs.skip-check.outputs.skip }}
    steps:
      - name: Wait for live release
        run: |
          sleep 30  # Give live release time to start
          while true; do
            STATUS=$(gh run list --workflow=live-release.yml --limit=1 --json status --jq '.[0].status')
            if [ "$STATUS" = "completed" ]; then
              break
            elif [ "$STATUS" = "failure" ]; then
              echo "Live release failed"
              exit 1
            fi
            sleep 10
          done

      - name: Trigger live e2e tests
        run: |
          gh workflow run e2e-tests.yml -f build_tag=${{ needs.define-tag.outputs.tag }} -f environment=live
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
