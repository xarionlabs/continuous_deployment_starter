name: e2e-tests

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases
      
      - name: Load version from services/version.env
        id: load_version
        run: |
          if [ -f services/version.env ]; then
            source services/version.env
            echo "version=${APP_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Error: services/version.env not found"
            exit 1
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Find applications with e2e tests
        id: find_applications
        run: |
          # Find applications that have both Dockerfile and e2e entrypoint
          VALID_E2E_APPS=""
          for app_dir in applications/*/; do
            app_name=$(basename "$app_dir")
            if [ -f "$app_dir/Dockerfile" ] && [ -f "$app_dir/entrypoints/entrypoint_e2e.sh" ]; then
              VALID_E2E_APPS="$VALID_E2E_APPS$app_name"$'\n'
            fi
          done
          
          # Remove trailing newline and convert to JSON
          VALID_E2E_APPS=$(echo "$VALID_E2E_APPS" | sed '/^$/d')
          echo "applications=$(echo "$VALID_E2E_APPS" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

      - name: Run e2e tests for each application
        env:
          VARS_JSON: ${{ toJson(vars) }}
          REGISTRY: ghcr.io
          TAG: ${{ steps.load_version.outputs.version }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          # Create a temporary .env file with all environment variables
          echo "APP_ENV=$ENVIRONMENT" > .env
          echo "APP_VERSION=$TAG" >> .env
          python3 -c "import os, json; data = json.loads(os.environ['VARS_JSON']); [print(f'{k}={json.dumps(v)[1:-1]}') for k, v in data.items()]" >> .env 2>/dev/null || true
          
<<<<<<< HEAD
          log_with_timestamp "Environment variables loaded into .env file"
          
          # Get applications array
          APPS=$(echo '${{ steps.find_applications.outputs.applications }}' | jq -r '.[]')
          
          if [ -z "$APPS" ]; then
            echo "::notice::No applications found with e2e tests"
            exit 0
          fi
          
          # Run tests for each application
          failed_apps=()
          for app in $APPS; do
            echo "::group::Running e2e tests for $app"
            log_with_timestamp "Running e2e tests for $app in $ENVIRONMENT environment"
=======
          echo "Environment variables loaded into .env file"
          cat .env
          
          for app in $(echo '${{ steps.find_applications.outputs.applications }}' | jq -r '.[]'); do
            echo "Running e2e tests for $app in $ENVIRONMENT environment..."
>>>>>>> parent of 27b1065 (Merge pull request #6 from xarionlabs/feature/releases)
            
            # Debug information
            echo "Debug - Image reference components:"
            echo "REGISTRY: $REGISTRY"
            echo "GITHUB_REPOSITORY: ${{ github.repository }}"
            echo "APP: $app"
            echo "TAG: $TAG"
            echo "Full image reference: $REGISTRY/${{ github.repository }}/$app:$TAG"
            
            # Run the e2e tests using the application's own entrypoint
            docker run --rm \
              --network host \
              --env-file .env \
              --entrypoint /app/entrypoints/entrypoint_e2e.sh \
<<<<<<< HEAD
              "$REGISTRY/${{ github.repository }}/$app:$TAG" 2>/dev/null; then
              log_with_timestamp "E2E tests passed for $app"
            else
              log_with_timestamp "E2E tests failed for $app in $ENVIRONMENT environment"
              # Show test output only on failure
              echo "::group::Test output for debugging"
              docker run --rm \
                --network host \
                --env-file .env \
                --entrypoint /app/entrypoints/entrypoint_e2e.sh \
                "$REGISTRY/${{ github.repository }}/$app:$TAG" || true
              echo "::endgroup::"
              failed_apps+=("$app")
            fi
            
            echo "::endgroup::"
          done
          
          # Clean up environment file
          rm -f .env 2>/dev/null || true
          
          # Report results
          if [ ${#failed_apps[@]} -gt 0 ]; then
            log_with_timestamp "E2E tests failed for the following applications: ${failed_apps[*]}"
            exit 1
          else
            log_with_timestamp "All E2E tests passed successfully"
          fi
        timeout-minutes: 20 
=======
              "$REGISTRY/${{ github.repository }}/$app:$TAG" 
            
            # Exit if tests fail
            if [ $? -ne 0 ]; then
              echo "E2E tests failed for $app in $ENVIRONMENT environment"
              exit 1
            fi
          done 
>>>>>>> parent of 27b1065 (Merge pull request #6 from xarionlabs/feature/releases)
