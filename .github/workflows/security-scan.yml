name: Security Scanning

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly scan on Mondays at 2 AM

permissions:
  contents: read
  security-events: write

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secrets.sarif'
          scanners: 'secret'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-secrets.sarif'

  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    strategy:
      matrix:
        image-type: ['applications', 'utilities', 'release-tooling']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find Docker images to scan
        id: find-images
        run: |
          IMAGES=()
          
          case "${{ matrix.image-type }}" in
            applications)
              IMAGES=($(find applications -name "Dockerfile" -type f | xargs dirname | sed 's|applications/||' | sort -u))
              ;;
            utilities)
              IMAGES=($(find utilities -name "Dockerfile" -type f | xargs dirname | sed 's|utilities/||' | sort -u))
              ;;
            release-tooling)
              IMAGES=($(find tools -path "*/testing/*" -prune -o -name "Dockerfile" -type f -print | xargs dirname | sed 's|tools/||' | sort -u))
              ;;
          esac
          
          echo "images=$(printf '%s\n' "${IMAGES[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

      - name: Build and scan images
        env:
          REGISTRY: ghcr.io
        run: |
          IMAGES=$(echo '${{ steps.find-images.outputs.images }}' | jq -r '.[]')
          
          for image in $IMAGES; do
            echo "::group::Scanning $image"
            
            # Determine the correct path
            if [ -d "applications/$image" ]; then
              CONTEXT="applications/$image"
              IMAGE_NAME="$REGISTRY/${{ github.repository }}/$image"
            elif [ -d "utilities/$image" ]; then
              CONTEXT="utilities/$image"
              IMAGE_NAME="$REGISTRY/${{ github.repository }}/utilities-$image"
            elif [ -d "tools/deployment/$image" ]; then
              CONTEXT="tools/deployment/$image"
              IMAGE_NAME="$REGISTRY/${{ github.repository }}/deployment-manager"
            elif [ -d "tools/$image" ]; then
              CONTEXT="tools/$image"
              IMAGE_NAME="$REGISTRY/${{ github.repository }}/tools-$image"
            else
              echo "::warning::Cannot find context for $image"
              continue
            fi
            
            # Build image for scanning
            docker build -t "scan-$image" "$CONTEXT"
            
            # Run Trivy vulnerability scan
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v ${{ github.workspace }}:/workspace \
              aquasecurity/trivy:latest image \
              --format sarif \
              --output /workspace/trivy-$image.sarif \
              --severity HIGH,CRITICAL \
              "scan-$image"
            
            echo "::endgroup::"
          done

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-*.sarif'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC