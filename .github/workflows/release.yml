name: Release

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.2.0
        env:
          VARS_JSON: ${{ toJson(vars) }}
          SECRETS_JSON: ${{ toJson(secrets) }}
        with:
          host: ${{ vars.HOST }}
          username: ${{ vars.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: VARS_JSON, SECRETS_JSON
          script: |
            set -e
            echo "Debug: Checking directories..."
            ls -la ~/runtime || echo "Runtime directory missing"
            ls -la ~/runtime/continuous_deployment_starter || echo "Project directory missing"
            echo "Debug: Checking repository state..."
            ls -la ~/runtime/continuous_deployment_starter/.git || echo "No git repository found"
            cd ~/runtime/continuous_deployment_starter
            git status || echo "Git status failed"
            
            export PATH=$PATH:$(pwd)/.github/workflows/scripts/
            git checkout releases
            
            # Configure git to handle merge conflicts automatically
            git config merge.ours.driver true
            git config user.name github-actions
            git config user.email github-actions@github.com
            
            # Pull with automatic conflict resolution
            echo "Pulling latest changes from releases branch..."
            if ! git pull origin releases --no-edit; then
              echo "Pull conflicts detected, resolving automatically..."
              
              # Check if there are any merge conflicts
              if git status --porcelain | grep -q "^UU\|^AA\|^DD"; then
                echo "Resolving pull conflicts by taking remote version"
                git status --porcelain | grep "^UU\|^AA\|^DD" | cut -c4- | while read file; do
                  git checkout --theirs "$file"
                  git add "$file"
                done
                git commit --no-edit -m "Resolve pull conflicts automatically"
              fi
            fi
            refresh_podman_secrets.sh "$SECRETS_JSON"
            create_env_variables.sh
            set -o allexport
            source .env
            source services/version.env
            set +o allexport
            check-service-envs.sh
            generate_quadlets.sh
            echo "Running quadlet dry-run to validate configurations..."
            /usr/libexec/podman/quadlet --dryrun --user $XDG_CONFIG_HOME/containers/systemd/
            generate_meta_services.sh
            pull_latest_images.sh
            start_all_services.sh
            echo "Triggering container auto-update..."
            podman auto-update || echo "Auto-update command failed, continuing..." 