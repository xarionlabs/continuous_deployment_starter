#!/bin/bash

# Pre-commit hook to check app.pxy6.com for errors
set -e

echo "Running pre-commit checks for app.pxy6.com..."

# Check if app.pxy6.com files are being committed
if git diff --cached --name-only | grep -q "^applications/app\.pxy6\.com/"; then
    echo "Detected changes in app.pxy6.com, running checks..."
    
    # Change to the app directory
    cd applications/app.pxy6.com/src
    
    # Check if package.json exists
    if [ ! -f "package.json" ]; then
        echo "Error: package.json not found in applications/app.pxy6.com/src"
        exit 1
    fi
    
    # Install dependencies if node_modules doesn't exist
    if [ ! -d "node_modules" ]; then
        echo "Installing dependencies..."
        npm install
    fi
    
    # Run TypeScript type checking
    echo "Running TypeScript type checking..."
    if ! npm run typecheck; then
        echo "❌ TypeScript type checking failed"
        exit 1
    fi
    echo "✅ TypeScript type checking passed"
    
    # Run ESLint
    echo "Running ESLint..."
    if ! npm run lint; then
        echo "❌ ESLint failed"
        exit 1
    fi
    echo "✅ ESLint passed"
    
    # Run tests (pass if no tests exist)
    echo "Running tests..."
    if ! npm run test -- --passWithNoTests; then
        echo "❌ Tests failed"
        exit 1
    fi
    echo "✅ Tests passed"
    
    # Try to build the project
    echo "Building project..."
    if ! npm run build; then
        echo "❌ Build failed"
        exit 1
    fi
    echo "✅ Build successful"
    
    echo "All pre-commit checks passed for app.pxy6.com! ✅"
else
    echo "No changes detected in app.pxy6.com, skipping checks."
fi

# Test Docker builds for any modified Dockerfiles
echo "Checking for modified Dockerfiles..."
DOCKERFILES=$(git diff --cached --name-only | grep -E "Dockerfile$" || true)

if [ -n "$DOCKERFILES" ]; then
    echo "🐳 Dockerfiles detected in commit. Testing Docker builds..."
    
    # Function to test build in a directory
    test_docker_build() {
        local dockerfile_path=$1
        local dir=$(dirname "$dockerfile_path")
        local name=$(basename "$dir")
        
        echo "📦 Testing Docker build for $name ($dockerfile_path)..."
        
        cd "$dir"
        if docker build -t "test-$name:$(date +%s)" . > /dev/null 2>&1; then
            echo "✅ $name Docker build successful"
            cd - > /dev/null
        else
            echo "❌ $name Docker build failed"
            echo "🔍 Run 'cd $dir && docker build .' to see detailed error"
            cd - > /dev/null
            exit 1
        fi
    }
    
    # Test each modified Dockerfile
    for dockerfile in $DOCKERFILES; do
        if [ -f "$dockerfile" ]; then
            test_docker_build "$dockerfile"
        fi
    done
    
    echo "🎉 All Docker builds passed!"
else
    echo "No Dockerfiles modified, skipping Docker build tests."
fi

# Validate YAML files
echo "Checking for modified YAML files..."
YAML_FILES=$(git diff --cached --name-only | grep -E "\.(yaml|yml)$" || true)

if [ -n "$YAML_FILES" ]; then
    echo "📝 YAML files detected in commit. Validating syntax..."
    
    for yaml_file in $YAML_FILES; do
        if [ -f "$yaml_file" ]; then
            echo "🔍 Validating $yaml_file..."
            
            # Use Docker with mikefarah/yq to validate YAML
            if docker run --rm -v "$(pwd):/workdir" mikefarah/yq eval '.' "/workdir/$yaml_file" > /dev/null 2>&1; then
                echo "✅ $yaml_file is valid YAML"
            else
                echo "❌ $yaml_file has invalid YAML syntax"
                echo "🔍 Run 'docker run --rm -v \"\$(pwd):/workdir\" mikefarah/yq eval \".\" \"/workdir/$yaml_file\"' to see detailed error"
                exit 1
            fi
        fi
    done
    echo "🎉 All YAML files are valid!"
else
    echo "No YAML files modified, skipping YAML validation."
fi

echo "Pre-commit hook completed successfully!"