version: '3.8'

services:
  # Mock PostgreSQL Database
  test-postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_MULTIPLE_DATABASES: "test_app_db,test_airflow_db"
    ports:
      - "5433:5432"
    volumes:
      - test-postgres-data:/var/lib/postgresql/data
      - ./fixtures/postgres:/docker-entrypoint-initdb.d
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Nginx Proxy
  test-nginx:
    image: nginx:alpine
    container_name: test-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./mock-services/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./mock-services/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./mock-services/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - test-app1
      - test-app2
      - test-shopify-app
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Application 1 (FastAPI/Streamlit)
  test-app1:
    build:
      context: ./mock-services/app1
      dockerfile: Dockerfile
    container_name: test-app1
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_app_db
      - ENVIRONMENT=test
      - API_PORT=8000
      - STREAMLIT_PORT=8501
    ports:
      - "8001:8000"
      - "8501:8501"
    depends_on:
      test-postgres:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Application 2 (React/Vite)
  test-app2:
    build:
      context: ./mock-services/app2
      dockerfile: Dockerfile
    container_name: test-app2
    environment:
      - NODE_ENV=test
      - VITE_API_URL=http://test-app1:8000
    ports:
      - "3000:3000"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Shopify App (Remix)
  test-shopify-app:
    build:
      context: ./mock-services/shopify-app
      dockerfile: Dockerfile
    container_name: test-shopify-app
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_app_db
      - SHOPIFY_API_KEY=test_key
      - SHOPIFY_API_SECRET=test_secret
      - SHOPIFY_APP_URL=http://localhost:8080
    ports:
      - "3001:3000"
    depends_on:
      test-postgres:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Airflow Service
  test-airflow:
    build:
      context: ./mock-services/airflow
      dockerfile: Dockerfile
    container_name: test-airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://test_user:test_password@test-postgres:5432/test_airflow_db
      - AIRFLOW__CORE__FERNET_KEY=test_fernet_key_32_characters_long
      - AIRFLOW__WEBSERVER__SECRET_KEY=test_secret_key
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
    ports:
      - "8082:8080"
    depends_on:
      test-postgres:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./fixtures/airflow/dags:/opt/airflow/dags
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5

  # Mock Container Registry (for testing image push/pull)
  test-registry:
    image: registry:2
    container_name: test-registry
    ports:
      - "5000:5000"
    environment:
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - test-registry-data:/var/lib/registry
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/v2/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Runner Service
  test-runner:
    build:
      context: ./tests
      dockerfile: Dockerfile
    container_name: test-runner
    environment:
      - TEST_ENV=docker
      - DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_db
      - NGINX_URL=http://test-nginx:80
      - APP1_URL=http://test-app1:8000
      - APP2_URL=http://test-app2:3000
      - SHOPIFY_APP_URL=http://test-shopify-app:3000
      - AIRFLOW_URL=http://test-airflow:8080
      - REGISTRY_URL=http://test-registry:5000
    depends_on:
      test-postgres:
        condition: service_healthy
      test-nginx:
        condition: service_healthy
      test-app1:
        condition: service_healthy
      test-app2:
        condition: service_healthy
      test-shopify-app:
        condition: service_healthy
      test-airflow:
        condition: service_healthy
      test-registry:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./tests:/app/tests
      - ./fixtures:/app/fixtures
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - test

volumes:
  test-postgres-data:
  test-registry-data:

networks:
  test-network:
    driver: bridge