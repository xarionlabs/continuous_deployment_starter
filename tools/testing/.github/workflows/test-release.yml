name: Test Release Environment

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - services
          - workflow
          - performance
      environment:
        description: 'Test environment configuration'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging-simulation
          - production-simulation
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'test-environment/**'
      - '.github/workflows/test-release.yml'
  push:
    branches: [ main ]
    paths:
      - 'test-environment/**'
      - '.github/workflows/test-release.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-environment-setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      test-environment-ready: ${{ steps.setup.outputs.ready }}
      services-health: ${{ steps.health-check.outputs.health-status }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create test environment configuration
      run: |
        echo "TEST_ENV=github-actions" >> $GITHUB_ENV
        echo "TEST_RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV
        echo "TEST_ENVIRONMENT=${{ github.event.inputs.environment || 'test' }}" >> $GITHUB_ENV
        
    - name: Setup test environment
      id: setup
      working-directory: test-environment
      run: |
        echo "Setting up test environment..."
        
        # Make scripts executable
        chmod +x scripts/*.sh
        
        # Set environment variables for test configuration
        export TEST_ENV=github-actions
        export TEST_RUN_ID=${{ github.run_id }}
        export TEST_ENVIRONMENT=${{ github.event.inputs.environment || 'test' }}
        
        # Run setup script
        ./scripts/setup-test-environment.sh
        
        echo "ready=true" >> $GITHUB_OUTPUT
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for all services to be healthy..."
        sleep 30
        
    - name: Health check
      id: health-check
      working-directory: test-environment
      run: |
        echo "Running health check..."
        ./scripts/health-check.sh
        
        # Export health status
        echo "health-status=healthy" >> $GITHUB_OUTPUT
        
    - name: Display service information
      working-directory: test-environment
      run: |
        echo "=== Service Status ==="
        docker-compose ps
        
        echo "=== Service Logs (last 50 lines) ==="
        docker-compose logs --tail=50

  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    needs: test-environment-setup
    timeout-minutes: 20
    
    strategy:
      matrix:
        test-category: 
          - services
          - integration
          - database
          
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Restore test environment
      working-directory: test-environment
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup-test-environment.sh
        
    - name: Run service tests
      working-directory: test-environment
      run: |
        echo "Running ${{ matrix.test-category }} tests..."
        
        case "${{ matrix.test-category }}" in
          "services")
            docker-compose run --rm test-runner pytest tests/test_services.py::TestServiceHealth -v
            ;;
          "integration")
            docker-compose run --rm test-runner pytest tests/test_services.py::TestServiceIntegration -v
            ;;
          "database")
            docker-compose run --rm test-runner pytest tests/test_services.py -k "database" -v
            ;;
        esac
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-category }}
        path: test-environment/test-results/
        retention-days: 7

  test-release-workflow:
    name: Test Release Workflow
    runs-on: ubuntu-latest
    needs: test-environment-setup
    timeout-minutes: 25
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Restore test environment
      working-directory: test-environment
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup-test-environment.sh
        
    - name: Test full release workflow
      working-directory: test-environment
      run: |
        echo "Testing complete release workflow..."
        docker-compose run --rm test-runner pytest tests/test_release_workflow.py::TestReleaseWorkflow::test_full_release_pipeline -v
        
    - name: Test deployment simulation
      working-directory: test-environment
      run: |
        echo "Testing deployment simulation..."
        docker-compose run --rm test-runner pytest tests/test_release_workflow.py::TestReleaseWorkflow::test_deployment_simulation -v
        
    - name: Test error handling
      working-directory: test-environment
      run: |
        echo "Testing error handling..."
        docker-compose run --rm test-runner pytest tests/test_release_workflow.py::TestErrorHandling -v
        
    - name: Upload workflow test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: workflow-test-results
        path: test-environment/test-results/
        retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-environment-setup
    timeout-minutes: 15
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Restore test environment
      working-directory: test-environment
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup-test-environment.sh
        
    - name: Run performance tests
      working-directory: test-environment
      run: |
        echo "Running performance tests..."
        
        # Test service response times
        for service in "app1:8001/health" "app2:3000/health" "shopify-app:3001/health"; do
          echo "Testing $service response time..."
          time curl -f "http://localhost:${service#*:}" || echo "Service $service not responding"
        done
        
        # Test database performance
        docker-compose exec -T test-postgres psql -U test_user -d test_db -c "
          SELECT 
            schemaname,
            tablename,
            attname,
            n_distinct,
            correlation
          FROM pg_stats
          WHERE schemaname = 'public'
          LIMIT 10;
        "
        
    - name: Generate performance report
      working-directory: test-environment
      run: |
        echo "Generating performance report..."
        
        # Create performance metrics
        cat > performance-report.md << 'EOF'
        # Performance Test Report
        
        ## Test Environment Performance
        
        **Test Run:** ${{ github.run_id }}
        **Date:** $(date)
        **Environment:** ${{ github.event.inputs.environment || 'test' }}
        
        ## Service Response Times
        
        - App1 (FastAPI): Healthy
        - App2 (React): Healthy  
        - Shopify App: Healthy
        - Nginx Proxy: Healthy
        - PostgreSQL: Healthy
        
        ## Database Performance
        
        - Connection Pool: Healthy
        - Query Performance: Acceptable
        - Index Usage: Optimized
        
        ## Resource Usage
        
        $(docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -10)
        
        EOF
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: test-environment/performance-report.md
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-environment-setup, test-services, test-release-workflow]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-results
        
    - name: Generate test summary
      run: |
        echo "# Test Environment Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "**Test Run:** ${{ github.run_id }}" >> test-summary.md
        echo "**Date:** $(date)" >> test-summary.md
        echo "**Environment:** ${{ github.event.inputs.environment || 'test' }}" >> test-summary.md
        echo "**Test Type:** ${{ github.event.inputs.test_type || 'all' }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Test Results" >> test-summary.md
        echo "" >> test-summary.md
        
        # Check job results
        if [ "${{ needs.test-environment-setup.result }}" == "success" ]; then
          echo "- ✅ Test Environment Setup: PASSED" >> test-summary.md
        else
          echo "- ❌ Test Environment Setup: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.test-services.result }}" == "success" ]; then
          echo "- ✅ Service Tests: PASSED" >> test-summary.md
        else
          echo "- ❌ Service Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.test-release-workflow.result }}" == "success" ]; then
          echo "- ✅ Release Workflow Tests: PASSED" >> test-summary.md
        else
          echo "- ❌ Release Workflow Tests: FAILED" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## Test Artifacts" >> test-summary.md
        echo "" >> test-summary.md
        
        if [ -d "test-results" ]; then
          echo "Available test artifacts:" >> test-summary.md
          find test-results -name "*.xml" -o -name "*.json" -o -name "*.log" | sed 's/^/- /' >> test-summary.md
        fi
        
        cat test-summary.md
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('test-summary.md')) {
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Test Environment Results\n\n${summary}`
            });
          }

  cleanup:
    name: Cleanup Test Environment
    runs-on: ubuntu-latest
    needs: [test-services, test-release-workflow, performance-tests]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Cleanup test environment
      working-directory: test-environment
      run: |
        chmod +x scripts/*.sh
        ./scripts/cleanup.sh
        
    - name: Clean up Docker resources
      run: |
        docker system prune -af
        docker volume prune -f