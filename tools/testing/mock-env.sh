#!/bin/bash

# mock-env.sh - Mock GitHub Actions Environment Setup
# This script sets up mock environment variables and files that mimic GitHub Actions environment

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[MOCK-ENV]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[MOCK-ENV]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[MOCK-ENV]${NC} $1"
}

print_error() {
    echo -e "${RED}[MOCK-ENV]${NC} $1"
}

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Function to generate mock GitHub Actions environment variables
setup_github_env() {
    print_status "Setting up GitHub Actions environment variables..."
    
    # Create test environment file
    cat > "$SCRIPT_DIR/test.env" << EOF
# GitHub Actions Environment Variables for Local Testing
# Generated by mock-env.sh on $(date)

# Repository Information
GITHUB_REPOSITORY=owner/continuous_deployment_starter
GITHUB_REPOSITORY_OWNER=owner
GITHUB_REPOSITORY_NAME=continuous_deployment_starter
GITHUB_WORKSPACE=/github/workspace

# Git Information
GITHUB_REF=refs/heads/main
GITHUB_REF_NAME=main
GITHUB_REF_TYPE=branch
GITHUB_SHA=fake_sha_$(date +%s)
GITHUB_HEAD_REF=
GITHUB_BASE_REF=main

# Event Information
GITHUB_EVENT_NAME=push
GITHUB_EVENT_PATH=/github/workflow/event.json

# Workflow Information
GITHUB_WORKFLOW=test_workflow
GITHUB_WORKFLOW_REF=refs/heads/main
GITHUB_WORKFLOW_SHA=fake_sha_$(date +%s)
GITHUB_JOB=test_job
GITHUB_ACTION=test_action
GITHUB_ACTION_REF=main
GITHUB_ACTION_REPOSITORY=owner/continuous_deployment_starter

# Actor Information
GITHUB_ACTOR=test_actor
GITHUB_TRIGGERING_ACTOR=test_actor

# Run Information
GITHUB_RUN_ID=123456789
GITHUB_RUN_NUMBER=1
GITHUB_RUN_ATTEMPT=1

# Runner Information
RUNNER_OS=Linux
RUNNER_ARCH=X64
RUNNER_NAME=test-runner
RUNNER_TEMP=/tmp
RUNNER_TOOL_CACHE=/opt/hostedtoolcache
RUNNER_WORKSPACE=/github/workspace

# GitHub Token (fake for testing)
GITHUB_TOKEN=fake_token_for_testing
GITHUB_API_URL=https://api.github.com
GITHUB_GRAPHQL_URL=https://api.github.com/graphql
GITHUB_SERVER_URL=https://github.com

# GitHub Output and State Files
GITHUB_OUTPUT=/tmp/github_output.txt
GITHUB_STATE=/tmp/github_state.txt
GITHUB_ENV=/tmp/github_env.txt
GITHUB_PATH=/tmp/github_path.txt
GITHUB_STEP_SUMMARY=/tmp/github_step_summary.txt

# Container Registry
REGISTRY=localhost:5000

# Database and Services (for testing)
DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
REDIS_URL=redis://redis-test:6379

# Application Environment
NODE_ENV=test
APP_ENV=test
APP_VERSION=test-$(date +%Y%m%d-%H%M%S)
TZ=Europe/Amsterdam

# Build and Deploy Settings
FORCE_BUILD=false
SKIP_BUILD=false
RELEASE_ONLY=false
DEPLOY_SERVICES=

# Mock External Service URLs
SHOPIFY_API_URL=http://mock-services:8080/shopify
EXTERNAL_API_URL=http://mock-services:8080/api

# Testing Flags
TESTING=true
CI=true
GITHUB_ACTIONS=true
EOF

    print_success "GitHub Actions environment variables created at: $SCRIPT_DIR/test.env"
}

# Function to setup mock secrets
setup_secrets() {
    print_status "Setting up mock secrets..."
    
    cat > "$SCRIPT_DIR/secrets.env" << EOF
# Mock Secrets for Local Testing
# Generated by mock-env.sh on $(date)
# WARNING: These are fake secrets for testing only!

# Database Secrets
DB_HOST=postgres-test
DB_PORT=5432
DB_NAME=test_db
DB_USER=test_user
DB_PASSWORD=test_password

# Redis Secrets
REDIS_HOST=redis-test
REDIS_PORT=6379
REDIS_PASSWORD=

# GitHub Token (fake)
GITHUB_TOKEN=fake_token_for_testing

# Container Registry Secrets
REGISTRY_USERNAME=test_user
REGISTRY_PASSWORD=test_password

# Shopify App Secrets (fake)
SHOPIFY_API_KEY=fake_shopify_api_key
SHOPIFY_API_SECRET=fake_shopify_api_secret
SHOPIFY_WEBHOOK_SECRET=fake_webhook_secret

# SSH Keys (fake)
SSH_PRIVATE_KEY=fake_ssh_private_key
SSH_HOST=test-host
SSH_USER=test-user

# API Keys (fake)
API_SECRET_KEY=fake_api_secret_key
ENCRYPTION_KEY=fake_encryption_key_for_testing

# External Service Secrets (fake)
EXTERNAL_API_KEY=fake_external_api_key
WEBHOOK_SECRET=fake_webhook_secret

# Notification Secrets (fake)
SLACK_WEBHOOK_URL=http://mock-services:8080/slack/webhook
DISCORD_WEBHOOK_URL=http://mock-services:8080/discord/webhook

# SSL/TLS (fake)
SSL_CERT=fake_ssl_cert
SSL_KEY=fake_ssl_key
EOF

    print_success "Mock secrets created at: $SCRIPT_DIR/secrets.env"
}

# Function to setup mock variables (public configuration)
setup_variables() {
    print_status "Setting up mock variables..."
    
    cat > "$SCRIPT_DIR/variables.env" << EOF
# Mock Variables for Local Testing
# Generated by mock-env.sh on $(date)

# Environment Configuration
ENVIRONMENT=test
DEPLOYMENT_ENVIRONMENT=test
NODE_ENV=test
APP_ENV=test

# Host Configuration
HOST=test-host
PORT=3000
DOMAIN=test.example.com

# Database Configuration
DB_HOST=postgres-test
DB_PORT=5432
DB_NAME=test_db

# Redis Configuration
REDIS_HOST=redis-test
REDIS_PORT=6379

# Registry Configuration
REGISTRY_HOST=localhost:5000
REGISTRY_NAMESPACE=test

# Application Configuration
APP_NAME=continuous_deployment_starter
APP_VERSION=test-$(date +%Y%m%d-%H%M%S)
BUILD_NUMBER=1
COMMIT_SHA=fake_sha_$(date +%s)

# Feature Flags
ENABLE_FEATURE_A=true
ENABLE_FEATURE_B=false
ENABLE_DEBUG_MODE=true
ENABLE_LOGGING=true

# Service Configuration
MAX_WORKERS=2
TIMEOUT=30
RETRY_COUNT=3
BATCH_SIZE=100

# External Service Configuration
EXTERNAL_API_TIMEOUT=30
RATE_LIMIT=100
CACHE_TTL=300

# Monitoring Configuration
ENABLE_METRICS=true
METRICS_PORT=9090
HEALTH_CHECK_INTERVAL=30

# Build Configuration
BUILD_TIMEOUT=600
TEST_TIMEOUT=300
DEPLOY_TIMEOUT=900
EOF

    print_success "Mock variables created at: $SCRIPT_DIR/variables.env"
}

# Function to create mock output files
setup_output_files() {
    print_status "Setting up mock output files..."
    
    # Create temporary directory for GitHub Actions output files
    mkdir -p /tmp/github_actions_mock
    
    # Create mock output files
    touch /tmp/github_output.txt
    touch /tmp/github_state.txt
    touch /tmp/github_env.txt
    touch /tmp/github_path.txt
    touch /tmp/github_step_summary.txt
    
    # Make them writable
    chmod 666 /tmp/github_output.txt
    chmod 666 /tmp/github_state.txt
    chmod 666 /tmp/github_env.txt
    chmod 666 /tmp/github_path.txt
    chmod 666 /tmp/github_step_summary.txt
    
    print_success "Mock output files created in /tmp/"
}

# Function to setup mock commit information
setup_commit_info() {
    print_status "Setting up mock commit information..."
    
    # Get real git information if available, otherwise use mock data
    if git rev-parse --is-inside-work-tree &> /dev/null; then
        REAL_SHA=$(git rev-parse HEAD)
        REAL_REF=$(git rev-parse --abbrev-ref HEAD)
        REAL_REPO=$(git remote get-url origin 2>/dev/null | sed 's/.*[:/]\([^/]*\/[^/]*\)\.git$/\1/' || echo "owner/continuous_deployment_starter")
        
        # Update test.env with real git information
        sed -i.bak "s|GITHUB_SHA=.*|GITHUB_SHA=$REAL_SHA|" "$SCRIPT_DIR/test.env"
        sed -i.bak "s|GITHUB_REF=.*|GITHUB_REF=refs/heads/$REAL_REF|" "$SCRIPT_DIR/test.env"
        sed -i.bak "s|GITHUB_REF_NAME=.*|GITHUB_REF_NAME=$REAL_REF|" "$SCRIPT_DIR/test.env"
        sed -i.bak "s|GITHUB_REPOSITORY=.*|GITHUB_REPOSITORY=$REAL_REPO|" "$SCRIPT_DIR/test.env"
        
        # Remove backup files
        rm -f "$SCRIPT_DIR/test.env.bak"
        
        print_success "Updated environment with real git information"
    else
        print_warning "Not in a git repository, using mock commit information"
    fi
}

# Function to validate environment setup
validate_setup() {
    print_status "Validating environment setup..."
    
    local validation_errors=()
    
    # Check if required files exist
    if [[ ! -f "$SCRIPT_DIR/test.env" ]]; then
        validation_errors+=("test.env file not found")
    fi
    
    if [[ ! -f "$SCRIPT_DIR/secrets.env" ]]; then
        validation_errors+=("secrets.env file not found")
    fi
    
    if [[ ! -f "$SCRIPT_DIR/variables.env" ]]; then
        validation_errors+=("variables.env file not found")
    fi
    
    # Check if output files exist
    if [[ ! -f "/tmp/github_output.txt" ]]; then
        validation_errors+=("github_output.txt file not found")
    fi
    
    # Report validation results
    if [[ ${#validation_errors[@]} -eq 0 ]]; then
        print_success "Environment setup validation passed"
    else
        print_error "Environment setup validation failed:"
        for error in "${validation_errors[@]}"; do
            print_error "  - $error"
        done
        return 1
    fi
}

# Function to export environment variables
export_env_vars() {
    print_status "Exporting environment variables..."
    
    # Source the test environment file
    if [[ -f "$SCRIPT_DIR/test.env" ]]; then
        set -a  # automatically export all variables
        source "$SCRIPT_DIR/test.env"
        set +a
        print_success "Environment variables exported from test.env"
    else
        print_error "test.env file not found"
        return 1
    fi
}

# Function to show environment summary
show_summary() {
    print_status "Environment Setup Summary:"
    echo "  - Test environment file: $SCRIPT_DIR/test.env"
    echo "  - Secrets file: $SCRIPT_DIR/secrets.env"
    echo "  - Variables file: $SCRIPT_DIR/variables.env"
    echo "  - Output files: /tmp/github_*.txt"
    echo "  - Repository: ${GITHUB_REPOSITORY:-unknown}"
    echo "  - Branch: ${GITHUB_REF_NAME:-unknown}"
    echo "  - SHA: ${GITHUB_SHA:-unknown}"
    echo "  - Event: ${GITHUB_EVENT_NAME:-unknown}"
    echo "  - Actor: ${GITHUB_ACTOR:-unknown}"
    echo "  - Registry: ${REGISTRY:-unknown}"
    echo ""
    echo "To use this environment:"
    echo "  source $SCRIPT_DIR/test.env"
    echo "  # or"
    echo "  export \$(cat $SCRIPT_DIR/test.env | grep -v '^#' | xargs)"
}

# Function to cleanup mock environment
cleanup_mock_env() {
    print_status "Cleaning up mock environment..."
    
    # Remove environment files
    rm -f "$SCRIPT_DIR/test.env"
    rm -f "$SCRIPT_DIR/secrets.env"
    rm -f "$SCRIPT_DIR/variables.env"
    
    # Remove output files
    rm -f /tmp/github_output.txt
    rm -f /tmp/github_state.txt
    rm -f /tmp/github_env.txt
    rm -f /tmp/github_path.txt
    rm -f /tmp/github_step_summary.txt
    
    print_success "Mock environment cleaned up"
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Mock GitHub Actions Environment Setup Script

OPTIONS:
    --cleanup       Clean up mock environment files
    --export        Export environment variables to current shell
    --validate      Validate environment setup
    --summary       Show environment summary
    -h, --help      Show this help message

EXAMPLES:
    $0                      # Setup mock environment
    $0 --export             # Setup and export environment variables
    $0 --validate           # Validate existing environment setup
    $0 --cleanup            # Clean up mock environment files

EOF
}

# Main function
main() {
    local action="setup"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --cleanup)
                action="cleanup"
                shift
                ;;
            --export)
                action="export"
                shift
                ;;
            --validate)
                action="validate"
                shift
                ;;
            --summary)
                action="summary"
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Execute requested action
    case $action in
        setup)
            setup_github_env
            setup_secrets
            setup_variables
            setup_output_files
            setup_commit_info
            validate_setup
            show_summary
            ;;
        export)
            setup_github_env
            setup_secrets
            setup_variables
            setup_output_files
            setup_commit_info
            export_env_vars
            show_summary
            ;;
        validate)
            validate_setup
            ;;
        summary)
            show_summary
            ;;
        cleanup)
            cleanup_mock_env
            ;;
        *)
            print_error "Unknown action: $action"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi