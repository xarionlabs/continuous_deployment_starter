# Production-ready Airflow configuration with LocalExecutor
# Uses PostgreSQL backend and simplified service architecture
---
services:

  airflow-dags-deploy:
    image: ghcr.io/xarionlabs/continuous_deployment_starter/airflow_dags:${APP_VERSION:-latest}
    restart: "no"
    command: deploy
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_plugins:/opt/airflow/plugins
      - airflow_packages:/opt/airflow
    labels:
      - "io.containers.autoupdate=registry"
    user: root

  airflow-webserver:
    image: docker.io/apache/airflow:3.0.2
    entrypoint: ["/opt/airflow/custom-entrypoint.sh"]
    command: api-server
    expose:
      - "8080"
    environment:
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_ALL_ADMINS: 'true'
      VIRTUAL_HOST: ${AIRFLOW_WEB_VIRTUAL_HOST}
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
      - ./configure-db-entrypoint.sh:/opt/airflow/custom-entrypoint.sh:ro
      - ~/runtime/airflow.cfg:/opt/airflow/airflow.cfg
    secrets:
      - PSQL_AIRFLOW_PASSWORD
      - PSQL_PXY6_AIRFLOW_PASSWORD
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/monitor/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - airflow-init
      - db
    networks:
      - db_network
      - proxy_network
      - airflow_network

  airflow-scheduler:
    image: docker.io/apache/airflow:3.0.2
    entrypoint: ["/opt/airflow/scheduler-entrypoint.sh"]
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
      - airflow_packages:/opt/airflow
      - ./scheduler-entrypoint.sh:/opt/airflow/scheduler-entrypoint.sh:ro
      - ~/runtime/airflow.cfg:/opt/airflow/airflow.cfg
    secrets:
      - PSQL_AIRFLOW_PASSWORD
      - PSQL_PXY6_AIRFLOW_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - airflow-init
      - airflow-dags-deploy
      - db
    networks:
      - db_network

  airflow-init:
    image: docker.io/apache/airflow:3.0.2
    entrypoint: /bin/bash
    restart: "no"
    command: /opt/airflow/custom-entrypoint.sh airflow db migrate
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _AIRFLOW_DB_MIGRATE: 'true'
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
      - ./configure-db-entrypoint.sh:/opt/airflow/custom-entrypoint.sh:ro
      - ~/runtime/airflow.cfg:/opt/airflow/airflow.cfg
    secrets:
      - PSQL_AIRFLOW_PASSWORD
      - PSQL_PXY6_AIRFLOW_PASSWORD
    depends_on:
      - db
    networks:
      - db_network

volumes:
  airflow_dags:
  airflow_logs:
  airflow_plugins:
  airflow_packages:

secrets:
  PSQL_AIRFLOW_PASSWORD:
    external: true
  PSQL_PXY6_AIRFLOW_PASSWORD:
    external: true

networks:
  db_network:
    driver: bridge
  proxy_network:
    driver: bridge
  airflow_network:
    driver: bridge
